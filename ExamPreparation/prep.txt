'use strict'; // код работает в современном режиме

В этом файле я переписываю теорию, для лучшего запоминания ее. Основной язык - JavaScript.


................................Базовые понятия................................

Абстракция это обобщение, отвлеченное от конкретики с выделением существенных и отсечением несущественных свойств и связей. Абстрагирование - построение абстракций или моделей, повышает повторное использование алгоритмов и структур данных.
    *Абстракция - обобщенное решение задачи (в отличие от конкретного решения), подходящее для широкого круга задач;
    *Абстракция - модель реального объекта (множества объектов), обобщение множества, приближение к реальности, достаточное для решения задачи;
    *Абстракция - множество свойств и связей объекта, относящееся к определенному его аспекту, необходимому для решения задачи;

Парадигма программирования
    *Парадигма задает набор идей и понятий, допущений и ограничений, для концепций, принципов, постулатов, приемов и техники программирования для решения задач на ЭВМ;
    *Парадигма предлагает модель решения задач, определенный стиль, шаблоны (примеры хороших и плохих решений) применяемых для написания программного кода;

Синтаксис - правила построения програмного кода из символов, но не затрагивающие смысловую (семантическую) нагрузку кода. Синтаксис определяет только формальную структуру кода;

Значение / Value - величина, записанная в определенное место памяти в определенном формате и представляющая данные, которым может манипулировать программа.

Тип - множество значений и операции, которые могут быть произведены над этими значениями. 
    - [Number, String, Boolean, Object, Function, Array]

Литерал / Literal - запись значения в коде программы. Литералы могут иметь различный синтаксис, от очень простого, для записи чисел, до сложных синтаксических конструкций, для записи объектов.
    - let value = 'value'; ---- 'value' это литерал строки.

Скаляр / Scalar / Primitive / Atomic Value - значение примитивного типа данных. Скаляр копируется при присвоении и передается в функцию по значению.

Ссылка / Reference указывает на значение ссылочного типа, т.е. не скалярное значние, для JavaScript это подтипы Object, Function, Array.

Идентификатор / Identifier - имена переменных, констант, функций, методов, аргументов, классов, как внутренние, так и импортированные из других модулей и глобальные.
    - let name = 5; ---- name это идентификатор.

Переменная / Variable - именованная область памяти (идентификатор), имеющая тип данных, адрес и значение. Мы можем менять значение переменной в отличие от константы (а для некоторых языков и тип):
    - let cityName = 'Kyiv';

Присвоение / Assignment - связывания значения и идентификатора (например переменной). Операция присвоения во многих языках возвращает присваемое значение (имеет поведение выражения).
    - let cityName = 'Kyiv'; ---- = это присвоение.

Константа / Constant - идентификатор, с которым связано неизменяемое значение и тип:
    - const WATCH_TIMEOUT = 5000;

Структурные типы / Composed types - композитные типы или структуры состоят из нескольких скалярных значений, объединенных в одно таким образом, чтоб над этим объединенным значением можно выполнять набор операций, например: объект, массив, множество, кортеж.

Перечислимые типы - структуры, значения которых можно перечислить.

Флаг / Flag - Логическое значение, определяющее состояние чего-либо, например, признак закрытия соединения, признак завершения поиска по структуре данных и т.д. Например:
    - let flagName = false; Иногда флагами могут называть не логические, а перечислимые типы.

Алгоритм / Algorithm - это формальное описание порядка вычислений для определенного класса задач за конечное время (способность завершаться для любого множества входных данных).

Программа / Program - программный код и данные, объединенные в одно целое, для вычисления и управления ЭВМ.

Оператор / Statement - наименьшая синтаксическая часть языка программирования, испольняемая интерпретатором, средой или компилируемая в машинный код.

Выражение - синтаксис вычисления.

Блок кода - логически связанная группа операторов.

Функция / Function - абстракция преобразования значений.

Сигнатура функции - имя, количество аргументов и их типы, тип результата.

Метод - функция или процедура, связанная с объектным контекстом или программным интерфейсом;

Цикл - многократное исполнение блока операторов.

Рекурсия - вызов функции ее самой или определение функции, через нее саму.

Коллекция - структура данных, служащая для хранения набора значений и предоставляющая доступ к ним по индексам или ключам.

Массив - коллекция элементов, доступ к которым осуществляется по индексам.


................................Основные понятия................................

Объект или Экземпляр / Object or Instance - структура данных, содержащая состояние и методы, связанные с этим состоянием. Объект может быть создан как литерал {} или экземпляр класса new ClassName() или как экземпляр прототипа new PrototypeConstructor() или возвращен из фабрики.
    * const person = { name: 'Marcus', city: 'Roma', born: 121 };
    * const person = new Person('Marcus', 'Roma', 121);

Класс / Class - программная абстракция, объединяющая состояние и поведение (свойства и методы) своих экземпляров (инстансов).
    * class Point { constructor(x, y) { this.x = x; this.y = y; } };
    * class Rect { move(x, y) { this.x += x; this.y += y; } };
    * class Square extends Rect { constructor(x, y, m) { super(x, y, m, m) } };
    * class Point { static from(point) { return new Point(this.x, this.y); } };

Прототип / Prototype - специальный объект, на который ссылаются его экземпляры и наследники. Свойства прототипа становятся видны у наследников, если эти свойства не переопределены у наследников. Формируется цепочка прототипов, по которой происходит последовательный поиск свойств, пока они не будут найдены или пока не будет достигнут конец цепочки наследования. Иногда под прототипом понимается шаблон, который клонируется во время инстанциирования (не для JavaScript).

Инстанциирование / Instantiation - создание объекта (экземпляра) или выделение памяти для структуры данных.
    * const rect = new Rectangle(-50, -50, 100, 150);
    * const rect = { a: { x: -50, y: -50 }, b: { x: 100, y: 150 } };
    * const cities = new Array(1000);
    * const cities = ['Tehran', 'Kiev', 'Yalta', 'Beijing', 'Potsdam', 'London'];

Область видимости / Scope - часть кода, из которой "виден" идентификатор.

Лексический контекст / Lexical environment - набор идентификаторов, связанных с определенными значениями в рамках функции или блока кода (в том числе блоков циклов, условий и т.д.).

Объектный контекст функции - объект, связанный со служебным идентификатором this. Все функции, кроме стрелочных, могут быть связанны с объектным контекстом. Объект связан с this если функция является методом этого объекта, если функция привязана к нему через bind или вызвана через apply и call.

Глобальный контекст - глобальный объект-справочник. Если идентификатор не находится ни в одном из вложенных лексических контекстов, то будет выполнен его поиск в глобальном контексте (global, window, sandbox).

Объявление функции - способ объявления функции, который виден из любого места в лексическом контексте, в котором объявлена функция, пример:
    - function sum(a, b) { return a + b; }

Функциональное выражение / Function expression - связывание функции с идентификатором при помощи присвоения, при котором значение будет доступно через идентификатор не во всем лексическом контексте, а только после места присвоения. Имеет несколько синтаксических синтаксических вариантов:
    * Функциональное выражение с именованной функцией / Named function expression 
        - const max = function max(a, b) { return a + b; };
    * Анонимное функциональное выражение / Anonymous function expression 
        - const max = function(a, b) { return a + b; };
    * Лямбда функция / Lambda function
        - const max = (a, b) => { return a + b; };
    * Лямбда выражение, Функция-стрелка / Lambda expression, Arrow function 
        - const max = (a, b) => a + b;

Чистая функция / Pure Function 
    * функция, вычисляющая результат только на основе аргументов, не имеющая состояния и не обращающаяся к операциям ввода-вывода.
    * функция, результат которой всегда детерминированный, т.е. для любого аргумента всегда будет один и тот же результат
    * функция, не имеющая побочных эфектов.

Замыкание / Closure 
    * если вернуть функцию g из функции f, то g будет видеть контекст функции f, так же, как и свои аргументы;
    * если f возвращает g, то говорят, что экземпляр g замкнул контекст f;
    * способ, позволяющий связать функцию с контекстом (с данными или переменными контекста);
    * замыкание является аналогом свойства в ООП, тоже связывающие свойства с методами через объект, по сути объект в ООП сам является контекстом связывания;
    * при помощи замыкания можно реализовать функциональное наследование;
    * const add = a => b => a + b;
    * const hash = (data = {}) => (key, value) => (data[key] = value, data);

Суперпозиция / Superposition
    * объединение вызова функций в выражения таким образом, что результат одних функций становится аргументами других функций;
    * const expr2 = add(pow(mul(5, 8), 2), div(inc(sqrt(20)), log(2, 7)));

Композиция / Composition - создание сложной функциональности за счет объединения более простых функций.
    * const compose = (f1, f2) => x => f2(f1(x));
    * const compose = (...funcs) => (...args) => (funcs.reduce((args, fn) => [fn(...args)], args));
    
Частичное применение - это применение к функции некоторых аргументов и возврат новой функции, в ожидании остальных аргументов.
    - const partial = (fn, x) => (...args) => fn(x, ...args);

Каррирование / Currying - это преобразование функции с множеством аргументов в набор вложенных функций с одним аргументом.
    - const curry = f => a => b => f(a, b);

Функция высшего порядка / Higher-order Function
    * если функция только в аргументах, то это колбек;
    * если функция только в результате, то это фабрика функций на замыканиях;
    * если возвращаемая функция имеет тот же смысл, что и получаемая в аргументах (+ дополнительное поведение), то это обертка;
    * очень редко бывает, что возвращаемая функция не связана с функцией из аргументов(но пока ни кто не нашел вразумительного примера, где это реально нужно);
    * если на выходе класс или функция-конструктор, то это фабрика классов и прототипов соответственно;

Функциональное наследование / Functional Inheritance - при помощи замыканий, частичного применения, каррирования, вложенных лямбд.

Обертка / Wrapper 
    * функция, которая оборачивает другую функцию (иногда объект, интерфейс или функциональный объект), добавляя ему дополнительное поведение;
    * можно обернуть целый API интерфейс и даже асинхронную функцию вместе с колбеками (если известен контракт);

Дженерики / Generics 
    * Обобщенное программирование - парадигма, позволяющая обобщенно описать алгоритмы и структуры данных, абстрагируясь от конкретных типов.

Интерфейс / Interface 
    * Набор методов (функций) объединенных или общим объектным контекстом или применением к структурам данных одной предметной области т.е. смыслом (API);
    * способ определения (спецификации) контракта, по которому связаны программные компоненты;
    * набор методов с их именами, аргумаентами и типами аргументов.

Программный интерфейс / Application Interface, API
    * интерфейс программных компонентов: модулей, слоев абстракции, приложений;

Синглтон / Singleton 
    * шаблон проектирования, предпологающий, что в одном пространстве имен (процессе, приложении, базе данных) будет только один экземпляр класса (или просто один подобный объект) к которому можно обратиться по определенному (известному) имени;

Функция обратного вызова, колбек / Callback
    * функция передаваемая в качестве аргумента в другую функцию (или метод) для того, чтобы быть вызванной для возврата значений, ошибки или уведомления;
    * функции обратного вызова имеют подтипы:
        - один раз вызываемые(чаще всего);
        - Событие / Event;
        - Лисенер / Listener;

Итерирование / Iteration - многократное повторение одного блока кода или одной функции над различными данными.

Итератор / Iterator - интерфейс доступа к элементам коллекции: массива, множества, списка.

Сокет - программный интерфейс (или абстракция) для обмена данными между процессами.

Дескриптор / Handle - уникальный идентификатор программного объекта (чаще всего объекта ОС): файла, сокета, окна, таймера, соединения и т.д.

Состояние / State - совокупность данных программного компонента (переменных и структур данных), определяющие его поведение и реакцию на операции с ним.

Кэш / Cache - место временного хранения данных (буфер, коллекция, область памяти) для быстрого доступа и оптимизации.

Хэширование / Hashing - преобразование данных произвольной длинны (буфера, массива, объекта или структуры данных) в последовательность битов определенной длинны (хэш) при помощи хэш-функции (при изменении хоть 1 бита в данных хэш меняется существенно).

Функциональный объект - объект функционального типа, который является функцией и объектом одновременно. Может быть вызван, как функция и может иметь свойства и методы, как объект.

Функтор / Functor - это функциональный объект, который является еще и рекурсивным замыканием. Функтор хранит в замыкании защищенное значение и позволяющий отобразить это значение в другой функтор через вызов функции (обычно map).

Аппликативный функтор - функтор, который имеет метод apply.

Монада / Monad - аппликативный функтор, который имеет метод chain.

Мемоизация / Memoization - обертка, сохраняющая результаты выполнения функции для предотвращения повторных вычислений.

Примесь / Mixin - добавление свойств, методов или поведения к объекту после его инстанциирования. Пример: 
    - Object.assign(target, {field1, field2 }, { field3 });

Декоратор / Decorator - шаблон оборачивания объектов или функций для добавления новой функциональности без наследования при помощи специального синтаксиса.

Наследование / Inheritance - 'extends' когда один класс наследует методы другого.

Множественное наследование / Multiple Inheritance - когда класс наследует несколько других классов.

Непрямое наследование - хз.

Генератор / Generator - это объект возвращаемый функцией-генератором и соответствующий как "Итерируемому" протоколу, так и протоколу "Итератор".
    - function* generator() { yield 1; yield 2; yield3; }

Итератор / Iterable and Iterator - это объект, который предоставляет метод next(), возвращающий следующий элемент последовательности. Этот метод возвращает объект с двумя свойствами: done и value.

Ввод/вывод / I/O, Input-output
    * операции, выходящие за рамки CPU и RAM, т.е. операции с устройствами ввода вывода.

EventEmitter - универсальная абстракция для работы с событиями через подписку (subscription: addListener, on, once) и отправку (emit).

Чеининг / Chaining - цепочный синтаксис вызова функций total(april)(may)(july) или методов array.filter(f1).reduce(f2).

Сериализация / Serialization - преобразование структуры данных в битовую последовательность, обычно в последовательность байтов или в строку.

Десереализация / Deserialization - операция, обратная сериализация, т.е. восстановление структуры данных из последовательности битов(чаще байтов или строки).

Парсинг / Parsing - синтаксический анализ текста, результатом чего может являться:
    * для формальной грамматики - AST-дерево;
    * для слабоструктурного документа - структура данных, имеющая четкую структуру, в которую частично перенесены данные из слабой структуры;
    * для других естественных или искусственных языков - информационные модели, им соответствующие;

Регулярные выражения / Regular expressions - синтаксическая конструкция, паттерн, формальный язык, определяющий порядок парсинга другой синтаксической конструкции.

Зависимость / Dependency - связанность программных компонентов, при которой один компонент "знает другой".

Декомпозиция / Decomposition - разделение программного компонента на части по принципу функциональности, при этом, каждая часть будет решать подзадачу и появится часть кода, которая определяет порядок связи всех частей (композицию).

Ленивость - хз.

Обработка ошибок / Error handling - try...catch (?).

Фабрика / Factory - фкункция или метод для инстанциирования объектов, функций, структур данных и любых других программных абстракций.

Объектный пул / Object Pool - множество заранее инстанциированных объектов из которого мы можем их брать инициализированные экземпляры и отдавать их после использования.

Таймеры - выполняют функции спустя какое то заданое время.